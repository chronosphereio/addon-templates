{"name":"MS-AD-fluentbit-v1","config":{"Name":"lua","match":"*","code":"cb_filter=require('calyptia.pr')([====================[[{\"type\":\"custom_script\",\"opts\":{\"script\":\"return function(tag, ts, record)\\n    for k, v in pairs(record) do\\n        -- check if the value is empty\\n        if v == '' then\\n            -- delete the key\\n            record[k] = nil\\n        end\\n    end\\n    return 1, ts, record\\nend\"},\"comment\":\"remove empty keys\",\"id\":\"77ba6bc6-e833-4af1-8c81-adbff62e3825\",\"active\":true},{\"type\":\"custom_script\",\"opts\":{\"script\":\"return function(tag, ts, record)\\n    -- check if the record has a Message field\\n    if record['Message'] ~= nil then\\n        -- Prepend the string \\\"EventDetail\\\":\\\" to the beginning of the Message field\\n        record['Message'] = '{\\\"EventDetail\\\":\\\"' .. record['Message']\\n\\n        -- Replace specific patterns involving carriage return and newlines\\n        record['Message'] = record['Message']:gsub('\\\\r\\\\n\\\\r\\\\n([%w%s]+):\\\\r\\\\n\\\\t', '\\\"},\\\"%1\\\":{\\\"')  -- Replace \\\\r\\\\n and a tab sequence\\n        record['Message'] = record['Message']:gsub('\\\\r\\\\n\\\\r\\\\n([%w%s]+):\\\\t\\\\t\\\\t', '\\\"},\\\"%1\\\"::\\\"')  -- Replace \\\\r\\\\n and a tab sequence\\n        record['Message'] = record['Message']:gsub('\\\\r\\\\n\\\\r\\\\n([%w%s]+):\\\\t', '\\\"},\\\"%1\\\":\\\"')  -- Replace \\\\r\\\\n and a tab sequence\\n        record['Message'] = record['Message']:gsub('\\\\r\\\\n\\\\t', '\\\",\\\"')   -- Replace \\\\r\\\\n and a tab with `\\\",\\\"`\\n        record['Message'] = record['Message']:gsub('%.\\\\r\\\\n\\\\r\\\\n', '\\\",\\\"')  -- Replace double \\\\r\\\\n with `\\\"}` to close a JSON structure\\n        record['Message'] = record['Message']:gsub('\\\\r\\\\n\\\\r\\\\n', '\\\"},\\\"FieldDescriptions\\\":[\\\"')  -- Replace double \\\\r\\\\n with `\\\"}` to close a JSON structure\\n        record['Message'] = record['Message']:gsub('\\\\r\\\\n([%w%s]+):\\\\t', '\\\",\\\"%1\\\":\\\"')  -- Replace double \\\\r\\\\n with `\\\"}` to close a JSON structure\\n\\n        -- Replace tab patterns\\n        record['Message'] = record['Message']:gsub(':\\\\t\\\\t\\\\t', '\\\":\\\"')  -- Replace triple tab sequence\\n        record['Message'] = record['Message']:gsub(':\\\\t\\\\t', '\\\":\\\"')    -- Replace double tab sequence\\n        record['Message'] = record['Message']:gsub(':\\\\t', '\\\":\\\"')      -- Replace single tab sequence\\n\\n        -- Replace spaces in key names only (i.e., before `\\\":\\\"`)\\n        record['Message'] = record['Message']:gsub('\\\\\\\"([%w%s]+)\\\\\\\":', function(key)\\n            -- Replace spaces in the key with underscores\\n            return '\\\"' .. key:gsub('%s', '_') .. '\\\":'\\n        end)\\n\\n        -- Fix missing quotes, commas, and other broken patterns\\n        record['Message'] = record['Message']:gsub('}([%w]+):', '},\\\"%1\\\":')  -- Add quotes and commas for broken patterns\\n        record['Message'] = record['Message']:gsub('(,[%w]+):', '\\\"%1\\\":')    -- Ensure all keys are quoted\\n        record['Message'] = record['Message']:gsub('::\\\"([%w]+)\\\"},', ':\\\"%1\\\",')    -- fix one sided arrays\\n        record['Message'] = record['Message']:gsub('\\\"\\\"C\\\"', '\\\"C')    -- fix malformed file paths\\n        record['Message'] = record['Message']:gsub('\\\\\\\\', '/')    -- change all double backslashes to forward slashes\\n\\n        -- Ensure the message ends correctly if it's being treated like JSON\\n        if record['Message']:match('FieldDescriptions\\\"') then\\n            record['Message'] = record['Message'] .. '\\\"]' \\n        end\\n\\n        if not record['Message']:match('FieldDescriptions\\\"') then\\n            record['Message'] = record['Message'] .. '\\\"' \\n        end\\n\\n        -- Wrap everything inside the outer JSON object {\\\"Event\\\": ...}\\n        record['Message'] = '{\\\"Event\\\":' .. record['Message'] .. '}'\\n    end\\n    return 1, ts, record\\nend\\n\"},\"comment\":\"format message field\",\"id\":\"c12bb1d8-9287-470c-8686-6d3ad256a18e\",\"active\":true},{\"type\":\"json_decode\",\"opts\":{\"src\":\"Message\",\"dst\":\"decoded_json\"},\"comment\":\"\",\"id\":\"09cd959b-a7cc-4905-b497-2a0813114981\",\"active\":true},{\"type\":\"flatten\",\"opts\":{\"key\":\"decoded_json\",\"regex\":\"^.+$\",\"keyReplacement\":\"%1\",\"keepOrig\":false},\"comment\":\"\",\"id\":\"264bae45-773a-4af9-9a13-598e7e0d7d8c\",\"active\":true},{\"type\":\"flatten\",\"opts\":{\"key\":\"Event\",\"regex\":\"^.+$\",\"keyReplacement\":\"%1\",\"keepOrig\":false},\"comment\":\"\",\"id\":\"07b01311-44c4-46ce-b770-34c85399feed\",\"active\":true},{\"type\":\"block_keys\",\"opts\":{\"regex\":\"message|StringInserts|FieldDescription\",\"matchCase\":false,\"regexEngine\":\"pcre2\",\"nestedPath\":\"\"},\"comment\":\"\",\"id\":\"de29199c-6757-4ddd-9ea1-d2af81894471\",\"active\":true},{\"type\":\"custom_script\",\"opts\":{\"script\":\"-- Define a function that checks if a value is empty, \\\"\\\", n/a, or null\\nlocal function is_empty(v)\\n    return v == nil or v == \\\"\\\" or v == \\\"n/a\\\" or v == \\\"null\\\" or v == \\\"-\\\"\\n  end\\n  \\n  -- Define a function that recursively removes empty keys from a subrecord\\n  local function remove_empty_keys(subrecord)\\n    for k, v in pairs(subrecord) do\\n      -- Check if the value is empty using the 'is_empty' function\\n      if is_empty(v) then\\n        -- If the value is empty, delete the key\\n        subrecord[k] = nil\\n      elseif type(v) == 'table' then\\n        -- If the value is a table, recursively call the 'remove_empty_keys' function\\n        remove_empty_keys(v)\\n      end\\n    end\\n  end\\n  \\n  return function(tag, ts, record)\\n    -- Check if the record has a 'scopeLog' field\\n    if record['Certificate_Information'] ~= nil then\\n      -- Call the 'remove_empty_keys' function on the 'scopeLog' subrecord\\n      remove_empty_keys(record['Certificate_Information'])\\n    end\\n    -- Check if the record has a 'scopeLog' field\\n    if record['Additional_Information'] ~= nil then\\n      -- Call the 'remove_empty_keys' function on the 'scopeLog' subrecord\\n      remove_empty_keys(record['Additional_Information'])\\n    end\\n    return 1, ts, record\\n  end\"},\"comment\":\"remove empty and null kv pairs\",\"id\":\"077681a9-1d62-45d0-944c-e82f2c612bdf\",\"active\":true},{\"type\":\"custom_script\",\"opts\":{\"script\":\"return function(tag, ts, record)\\n    -- check if Certificate_Information exists and is empty\\n    if record['Certificate_Information'] ~= nil and next(record['Certificate_Information']) == nil then\\n        -- delete the key\\n        record['Certificate_Information'] = nil\\n    end\\n    return 1, ts, record\\nend\"},\"comment\":\"check if Certificate_Information has any sub fields, if it is empty remove the key\",\"id\":\"2a9271ea-d23a-4396-a802-983a90f7a3e4\",\"active\":true}]]====================])","call":"cb_filter"},"input":"{\"date\":1728578609.46029,\"ProviderName\":\"Microsoft-Windows-Security-Auditing\",\"ProviderGuid\":\"{54849625-5478-4994-A5BA-3E3B0328C30D}\",\"Qualifiers\":\"\",\"Keywords\":\"0x8020000000000000\",\"TimeCreated\":\"2024-10-10 12:43:28 -0500\",\"ActivityID\":\"\",\"RelatedActivityID\":\"\",\"Channel\":\"Security\",\"Computer\":\"PHL-DU-DSDC5.devfwh.lan\",\"UserID\":\"\",\"Message\":\"The computer attempted to validate the credentials for an account.\\r\\n\\r\\nAuthentication Package:\\tMICROSOFT_AUTHENTICATION_PACKAGE_V1_0\\r\\nLogon Account:\\tsolarwinds\\r\\nSource Workstation:\\tPHL-DU-SOAPE1\\r\\nError Code:\\t0x0\",\"StringInserts\":[\"MICROSOFT_AUTHENTICATION_PACKAGE_V1_0\",\"solarwinds\",\"PHL-DU-SOAPE1\",\"0x0\"],\"azure.server\":\"eus-pr-cta02\",\"log.source\":\"dev-on-prem-ad\"},\n{\"date\":1728578609.461934,\"ProviderName\":\"Microsoft-Windows-Security-Auditing\",\"ProviderGuid\":\"{54849625-5478-4994-A5BA-3E3B0328C30D}\",\"Qualifiers\":\"\",\"Keywords\":\"0x8020000000000000\",\"TimeCreated\":\"2024-10-10 12:43:28 -0500\",\"ActivityID\":\"\",\"RelatedActivityID\":\"\",\"Channel\":\"Security\",\"Computer\":\"PHL-DU-DSDC5.devfwh.lan\",\"UserID\":\"\",\"Message\":\"A Kerberos authentication ticket (TGT) was requested.\\r\\n\\r\\nAccount Information:\\r\\n\\tAccount Name:\\t\\tSSISDev\\r\\n\\tSupplied Realm Name:\\tDEVFWH\\r\\n\\tUser ID:\\t\\t\\tS-1-5-21-1286298065-615180497-676652719-6638\\r\\n\\r\\nService Information:\\r\\n\\tService Name:\\t\\tkrbtgt\\r\\n\\tService ID:\\t\\tS-1-5-21-1286298065-615180497-676652719-502\\r\\n\\r\\nNetwork Information:\\r\\n\\tClient Address:\\t\\t::ffff:10.49.140.125\\r\\n\\tClient Port:\\t\\t63903\\r\\n\\r\\nAdditional Information:\\r\\n\\tTicket Options:\\t\\t0x40810010\\r\\n\\tResult Code:\\t\\t0x0\\r\\n\\tTicket Encryption Type:\\t0x12\\r\\n\\tPre-Authentication Type:\\t2\\r\\n\\r\\nCertificate Information:\\r\\n\\tCertificate Issuer Name:\\t\\t\\r\\n\\tCertificate Serial Number:\\t\\r\\n\\tCertificate Thumbprint:\\t\\t\\r\\n\\r\\nCertificate information is only provided if a certificate was used for pre-authentication.\\r\\n\\r\\nPre-authentication types, ticket options, encryption types and result codes are defined in RFC 4120.\",\"StringInserts\":[\"SSISDev\",\"DEVFWH\",\"S-1-5-21-1286298065-615180497-676652719-6638\",\"krbtgt\",\"S-1-5-21-1286298065-615180497-676652719-502\",\"0x40810010\",\"0x0\",\"0x12\",\"2\",\"::ffff:10.49.140.125\",\"63903\",\"\",\"\",\"\"],\"azure.server\":\"eus-pr-cta02\",\"log.source\":\"dev-on-prem-ad\"},\n{\"date\":1728578609.463301,\"ProviderName\":\"Microsoft-Windows-Security-Auditing\",\"ProviderGuid\":\"{54849625-5478-4994-A5BA-3E3B0328C30D}\",\"Qualifiers\":\"\",\"Keywords\":\"0x8020000000000000\",\"TimeCreated\":\"2024-10-10 12:43:28 -0500\",\"ActivityID\":\"\",\"RelatedActivityID\":\"\",\"Channel\":\"Security\",\"Computer\":\"PHL-DU-DSDC5.devfwh.lan\",\"UserID\":\"\",\"Message\":\"A Kerberos service ticket was requested.\\r\\n\\r\\nAccount Information:\\r\\n\\tAccount Name:\\t\\tSSISDev@DEVFWH.LAN\\r\\n\\tAccount Domain:\\t\\tDEVFWH.LAN\\r\\n\\tLogon GUID:\\t\\t{ae0b9970-1119-0ece-200e-fe3b9ff2fc01}\\r\\n\\r\\nService Information:\\r\\n\\tService Name:\\t\\tPHL-QE-POSSQL1$\\r\\n\\tService ID:\\t\\tS-1-5-21-1286298065-615180497-676652719-31659\\r\\n\\r\\nNetwork Information:\\r\\n\\tClient Address:\\t\\t::ffff:10.49.140.125\\r\\n\\tClient Port:\\t\\t63904\\r\\n\\r\\nAdditional Information:\\r\\n\\tTicket Options:\\t\\t0x40810000\\r\\n\\tTicket Encryption Type:\\t0x12\\r\\n\\tFailure Code:\\t\\t0x0\\r\\n\\tTransited Services:\\t-\\r\\n\\r\\nThis event is generated every time access is requested to a resource such as a computer or a Windows service.  The service name indicates the resource to which access was requested.\\r\\n\\r\\nThis event can be correlated with Windows logon events by comparing the Logon GUID fields in each event.  The logon event occurs on the machine that was accessed, which is often a different machine than the domain controller which issued the service ticket.\\r\\n\\r\\nTicket options, encryption types, and failure codes are defined in RFC 4120.\",\"StringInserts\":[\"SSISDev@DEVFWH.LAN\",\"DEVFWH.LAN\",\"PHL-QE-POSSQL1$\",\"S-1-5-21-1286298065-615180497-676652719-31659\",\"0x40810000\",\"0x12\",\"::ffff:10.49.140.125\",\"63904\",\"0x0\",\"{AE0B9970-1119-0ECE-200E-FE3B9FF2FC01}\",\"-\"],\"azure.server\":\"eus-pr-cta02\",\"log.source\":\"dev-on-prem-ad\"}","isRawInput":false,"pipelineVersion":"24.10.4"}